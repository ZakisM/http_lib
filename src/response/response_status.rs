use std::convert::TryFrom;
use std::fmt::Formatter;

use crate::error::TcpIpError;
use crate::Result;

#[derive(Debug, Eq, PartialEq)]
pub enum ResponseStatus {
    Continue = 100,
    SwitchingProtocols = 101,
    Processing = 102,
    OK = 200,
    Created = 201,
    Accepted = 202,
    NonAuthoritativeInformation = 203,
    NoContent = 204,
    ResetContent = 205,
    PartialContent = 206,
    MultiStatus = 207,
    AlreadyReported = 208,
    IMUsed = 226,
    MultipleChoices = 300,
    MovedPermanently = 301,
    Found = 302,
    SeeOther = 303,
    NotModified = 304,
    UseProxy = 305,
    TemporaryRedirect = 307,
    PermanentRedirect = 308,
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    MethodNotAllowed = 405,
    NotAcceptable = 406,
    ProxyAuthenticationRequired = 407,
    RequestTimeout = 408,
    Conflict = 409,
    Gone = 410,
    LengthRequired = 411,
    PreconditionFailed = 412,
    PayloadTooLarge = 413,
    RequestUriTooLong = 414,
    UnsupportedMediaType = 415,
    RequestedRangeNotSatisfiable = 416,
    ExpectationFailed = 417,
    ImATeapot = 418,
    MisdirectedRequest = 421,
    UnprocessableEntity = 422,
    Locked = 423,
    FailedDependency = 424,
    UpgradeRequired = 426,
    PreconditionRequired = 428,
    TooManyRequests = 429,
    RequestHeaderFieldsTooLarge = 431,
    ConnectionClosedWithoutResponse = 444,
    UnavailableForLegalReasons = 451,
    ClientClosedRequest = 499,
    InternalServerError = 500,
    NotImplemented = 501,
    BadGateway = 502,
    ServiceUnavailable = 503,
    GatewayTimeout = 504,
    HttpVersionNotSupported = 505,
    VariantAlsoNegotiates = 506,
    InsufficientStorage = 507,
    LoopDetected = 508,
    NotExtended = 510,
    NetworkAuthenticationRequired = 511,
    NetworkConnectTimeoutError = 599,
}

impl ResponseStatus {
    pub fn from_u16(status_code: u16) -> Result<Self> {
        Self::try_from(status_code)
    }
}

impl TryFrom<u16> for ResponseStatus {
    type Error = TcpIpError;

    fn try_from(status_code: u16) -> Result<Self> {
        match status_code {
            100 => Ok(ResponseStatus::Continue),
            101 => Ok(ResponseStatus::SwitchingProtocols),
            102 => Ok(ResponseStatus::Processing),
            200 => Ok(ResponseStatus::OK),
            201 => Ok(ResponseStatus::Created),
            202 => Ok(ResponseStatus::Accepted),
            203 => Ok(ResponseStatus::NonAuthoritativeInformation),
            204 => Ok(ResponseStatus::NoContent),
            205 => Ok(ResponseStatus::ResetContent),
            206 => Ok(ResponseStatus::PartialContent),
            207 => Ok(ResponseStatus::MultiStatus),
            208 => Ok(ResponseStatus::AlreadyReported),
            226 => Ok(ResponseStatus::IMUsed),
            300 => Ok(ResponseStatus::MultipleChoices),
            301 => Ok(ResponseStatus::MovedPermanently),
            302 => Ok(ResponseStatus::Found),
            303 => Ok(ResponseStatus::SeeOther),
            304 => Ok(ResponseStatus::NotModified),
            305 => Ok(ResponseStatus::UseProxy),
            307 => Ok(ResponseStatus::TemporaryRedirect),
            308 => Ok(ResponseStatus::PermanentRedirect),
            400 => Ok(ResponseStatus::BadRequest),
            401 => Ok(ResponseStatus::Unauthorized),
            402 => Ok(ResponseStatus::PaymentRequired),
            403 => Ok(ResponseStatus::Forbidden),
            404 => Ok(ResponseStatus::NotFound),
            405 => Ok(ResponseStatus::MethodNotAllowed),
            406 => Ok(ResponseStatus::NotAcceptable),
            407 => Ok(ResponseStatus::ProxyAuthenticationRequired),
            408 => Ok(ResponseStatus::RequestTimeout),
            409 => Ok(ResponseStatus::Conflict),
            410 => Ok(ResponseStatus::Gone),
            411 => Ok(ResponseStatus::LengthRequired),
            412 => Ok(ResponseStatus::PreconditionFailed),
            413 => Ok(ResponseStatus::PayloadTooLarge),
            414 => Ok(ResponseStatus::RequestUriTooLong),
            415 => Ok(ResponseStatus::UnsupportedMediaType),
            416 => Ok(ResponseStatus::RequestedRangeNotSatisfiable),
            417 => Ok(ResponseStatus::ExpectationFailed),
            418 => Ok(ResponseStatus::ImATeapot),
            421 => Ok(ResponseStatus::MisdirectedRequest),
            422 => Ok(ResponseStatus::UnprocessableEntity),
            423 => Ok(ResponseStatus::Locked),
            424 => Ok(ResponseStatus::FailedDependency),
            426 => Ok(ResponseStatus::UpgradeRequired),
            428 => Ok(ResponseStatus::PreconditionRequired),
            429 => Ok(ResponseStatus::TooManyRequests),
            431 => Ok(ResponseStatus::RequestHeaderFieldsTooLarge),
            444 => Ok(ResponseStatus::ConnectionClosedWithoutResponse),
            451 => Ok(ResponseStatus::UnavailableForLegalReasons),
            499 => Ok(ResponseStatus::ClientClosedRequest),
            500 => Ok(ResponseStatus::InternalServerError),
            501 => Ok(ResponseStatus::NotImplemented),
            502 => Ok(ResponseStatus::BadGateway),
            503 => Ok(ResponseStatus::ServiceUnavailable),
            504 => Ok(ResponseStatus::GatewayTimeout),
            505 => Ok(ResponseStatus::HttpVersionNotSupported),
            506 => Ok(ResponseStatus::VariantAlsoNegotiates),
            507 => Ok(ResponseStatus::InsufficientStorage),
            508 => Ok(ResponseStatus::LoopDetected),
            510 => Ok(ResponseStatus::NotExtended),
            511 => Ok(ResponseStatus::NetworkAuthenticationRequired),
            599 => Ok(ResponseStatus::NetworkConnectTimeoutError),
            _ => Err(TcpIpError::new("Unknown response status")),
        }
    }
}

impl std::fmt::Display for ResponseStatus {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        let res = match self {
            ResponseStatus::Continue => "Continue",
            ResponseStatus::SwitchingProtocols => "Switching Protocols",
            ResponseStatus::Processing => "Processing",
            ResponseStatus::OK => "OK",
            ResponseStatus::Created => "Created",
            ResponseStatus::Accepted => "Accepted",
            ResponseStatus::NonAuthoritativeInformation => "Non-authoritative Information",
            ResponseStatus::NoContent => "No Content",
            ResponseStatus::ResetContent => "Reset Content",
            ResponseStatus::PartialContent => "Partial Content",
            ResponseStatus::MultiStatus => "Multi-Status",
            ResponseStatus::AlreadyReported => "Already Reported",
            ResponseStatus::IMUsed => "IM Used",
            ResponseStatus::MultipleChoices => "Multiple Choices",
            ResponseStatus::MovedPermanently => "Moved Permanently",
            ResponseStatus::Found => "Found",
            ResponseStatus::SeeOther => "See Other",
            ResponseStatus::NotModified => "Not Modified",
            ResponseStatus::UseProxy => "Use Proxy",
            ResponseStatus::TemporaryRedirect => "Temporary Redirect",
            ResponseStatus::PermanentRedirect => "Permanent Redirect",
            ResponseStatus::BadRequest => "Bad Request",
            ResponseStatus::Unauthorized => "Unauthorized",
            ResponseStatus::PaymentRequired => "Payment Required",
            ResponseStatus::Forbidden => "Forbidden",
            ResponseStatus::NotFound => "Not Found",
            ResponseStatus::MethodNotAllowed => "Method Not Allowed",
            ResponseStatus::NotAcceptable => "Not Acceptable",
            ResponseStatus::ProxyAuthenticationRequired => "Proxy Authentication Required",
            ResponseStatus::RequestTimeout => "Request Timeout",
            ResponseStatus::Conflict => "Conflict",
            ResponseStatus::Gone => "Gone",
            ResponseStatus::LengthRequired => "Length Required",
            ResponseStatus::PreconditionFailed => "Precondition Failed",
            ResponseStatus::PayloadTooLarge => "Payload Too Large",
            ResponseStatus::RequestUriTooLong => "Request-URI Too Long",
            ResponseStatus::UnsupportedMediaType => "Unsupported Media Type",
            ResponseStatus::RequestedRangeNotSatisfiable => "Requested Range Not Satisfiable",
            ResponseStatus::ExpectationFailed => "Expectation Failed",
            ResponseStatus::ImATeapot => "I'm A Teapot",
            ResponseStatus::MisdirectedRequest => "Misdirected Request",
            ResponseStatus::UnprocessableEntity => "Unprocessable Entity",
            ResponseStatus::Locked => "Locked",
            ResponseStatus::FailedDependency => "Failed Dependency",
            ResponseStatus::UpgradeRequired => "Upgrade Required",
            ResponseStatus::PreconditionRequired => "Precondition Required",
            ResponseStatus::TooManyRequests => "Too Many Requests",
            ResponseStatus::RequestHeaderFieldsTooLarge => "Request Header Fields Too Large",
            ResponseStatus::ConnectionClosedWithoutResponse => "Connection Closed Without Response",
            ResponseStatus::UnavailableForLegalReasons => "Unavailable For Legal Reasons",
            ResponseStatus::ClientClosedRequest => "Client Closed Request",
            ResponseStatus::InternalServerError => "Internal Server Error",
            ResponseStatus::NotImplemented => "Not Implemented",
            ResponseStatus::BadGateway => "Bad Gateway",
            ResponseStatus::ServiceUnavailable => "Service Unavailable",
            ResponseStatus::GatewayTimeout => "Gateway Timeout",
            ResponseStatus::HttpVersionNotSupported => "HTTP Version Not Supported",
            ResponseStatus::VariantAlsoNegotiates => "Variant Also Negotiates",
            ResponseStatus::InsufficientStorage => "Insufficient Storage",
            ResponseStatus::LoopDetected => "Loop Detected",
            ResponseStatus::NotExtended => "Not Extended",
            ResponseStatus::NetworkAuthenticationRequired => "Network Authentication Required",
            ResponseStatus::NetworkConnectTimeoutError => "Network Connect Timeout Error",
        };

        write!(f, "{}", res)
    }
}
